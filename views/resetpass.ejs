<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Reset Password - WebEcho</title>
	<link rel="stylesheet" href="/css/style.css">
	<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>

<body>
	<div class="container">
		<header class="header">
			<a href="/" class="logo" style="display: flex; align-items: center; gap: 0.5rem; font-weight: bold; font-size: 1.2rem;">
        <svg width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="2" /><path d="M16.24 7.76a6 6 0 0 1 0 8.48" /><path d="M19.07 4.93a10 10 0 0 1 0 14.14" /><path d="M7.76 16.24a6 6 0 0 1 0-8.48" /><path d="M4.93 19.07a10 10 0 0 1 0-14.14" /></svg>
        WebEcho
      </a>
			<button id="theme-toggle-btn" class="btn btn-secondary btn-sm">
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>
			</button>
		</header>

		<main class="main">
			<div class="card">
				<h2 class="mb-4">Reset Password</h2>

				<div id="verify-otp-section">
					<form id="verify-otp-form">
						<div class="form-group">
							<label for="reset-email" class="form-label">Email</label>
							<input type="email" id="reset-email" class="form-input" value="<%= email %>" <%=email ? 'readonly' : '' %> required>
						</div>
						<div class="form-group">
							<label for="reset-otp" class="form-label">OTP</label>
							<input type="text" id="reset-otp" class="form-input" placeholder="6-digit code" required maxlength="6">
						</div>
						<div class="dialog-footer">
							<button type="submit" class="btn btn-primary">Verify OTP</button>
						</div>
					</form>
				</div>

				<div id="reset-password-section" class="hidden">
					<form id="reset-password-form">
						<div class="form-group">
							<label for="new-password" class="form-label">New Password</label>
							<input type="password" id="new-password" class="form-input" required minlength="6">
						</div>
						<div class="form-group">
							<label for="confirm-password" class="form-label">Confirm Password</label>
							<input type="password" id="confirm-password" class="form-input" required minlength="6">
						</div>
						<div class="dialog-footer">
							<button type="submit" class="btn btn-primary">Reset Password</button>
						</div>
					</form>
				</div>
			</div>
		</main>
	</div>

	<div id="toast" class="toast"></div>

	<script>
		document.addEventListener('DOMContentLoaded', () => {
			const verifyForm = document.getElementById('verify-otp-form');
			const resetForm = document.getElementById('reset-password-form');
			const emailInput = document.getElementById('reset-email');

			if (emailInput.value) {
				document.getElementById('reset-otp').focus();
			}

			// Check if email is in URL
			const urlParams = new URLSearchParams(window.location.search);
			const email = urlParams.get('email');
			if (email) {
				document.getElementById('reset-email').value = email;
			}

			// Verify OTP
			verifyForm.addEventListener('submit', async (e) => {
				e.preventDefault();

				const email = document.getElementById('reset-email').value;
				const otp = document.getElementById('reset-otp').value;

				try {
					const response = await fetch('/auth/verify-reset-otp', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({ email, otp })
					});

					const data = await response.json();

					if (data.success) {
						document.getElementById('verify-otp-section').classList.add('hidden');
						document.getElementById('reset-password-section').classList.remove('hidden');
						showToast('OTP verified! Set your new password', 'success');
					} else {
						showToast(data.message, 'error');
					}
				} catch (error) {
					console.error('OTP verification error:', error);
					showToast('Failed to verify OTP', 'error');
				}
			});

			// Reset Password
			resetForm.addEventListener('submit', async (e) => {
				e.preventDefault();

				const email = document.getElementById('reset-email').value;
				const password = document.getElementById('new-password').value;
				const confirmPassword = document.getElementById('confirm-password').value;

				// Client-side validation
				if (!email || !password || !confirmPassword) {
					showToast('Please fill all fields', 'error');
					return;
				}

				if (password.length < 6) {
					showToast('Password must be at least 6 characters', 'error');
					return;
				}

				if (password !== confirmPassword) {
					showToast('Passwords do not match', 'error');
					return;
				}

				try {
					const response = await fetch('/auth/reset-password', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({ email, password })
					});

					const data = await response.json();

					if (!response.ok) {
						// Handle specific error cases
						if (data.error === 'USER_NOT_FOUND') {
							showToast('No account found with that email', 'error');
						} else if (data.error === 'MISSING_FIELDS') {
							showToast('Please fill all fields', 'error');
						} else {
							showToast(data.message || 'Password reset failed', 'error');
						}
						return;
					}

					showToast('Password reset successfully! Redirecting to Home...', 'success');
					setTimeout(() => {
						window.location.href = '/';
					}, 1500);

				} catch (error) {
					showToast('Network error. Please check your connection.', 'error');
				}
			});
		});

		function showToast(message, type = 'info') {
			const toast = document.getElementById('toast');
			toast.textContent = message;
			toast.className = 'toast visible ' + type;
			setTimeout(() => toast.classList.remove('visible'), 3000);
		}
	</script>
	<script src="/js/theme.js"></script>
</body>

</html>